{"version":3,"sources":["Components/Weather.jsx","context.js","App.jsx","reportWebVitals.js","index.js"],"names":["Weather","props","useState","query","setQuery","weather","setWeather","icon","setIcon","search","e","a","preventDefault","fetch","response","json","data","console","log","today","Date","toString","className","main","temp","onSubmit","type","placeholder","value","onChange","target","name","src","alt","Math","round","LanguageContext","createContext","App","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"0OA+EeA,MA3Ef,SAAiBC,GAEb,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwBJ,mBAAS,IAAjC,mBAAOK,EAAP,KAAaC,EAAb,KAEMC,EAAM,uCAAG,WAAMC,GAAN,iBAAAC,EAAA,6DACbD,EAAEE,iBADW,SAGYC,MAAM,qDAAD,OAAsDV,EAAtD,yDAHjB,cAGLW,EAHK,gBAIQA,EAASC,OAJjB,OAILC,EAJK,OAKXZ,EAAS,IACTa,QAAQC,IAAIF,GACZV,EAAWU,GAEXR,EAAQQ,EAAKX,QAAQ,GAAGE,MATb,4CAAH,sDA2BNY,EAAQC,OAAOC,WAErB,OAEA,qBAAKC,UAAmC,oBAAhBjB,EAAQkB,MAC1BlB,EAAQkB,KAAKC,KAAO,GACtB,WACA,MAHJ,SAIA,iCACM,sBAAMC,SAAahB,EAAnB,SACE,sBAAKa,UAAU,aAAf,UACE,uBAAOI,KAAK,OAAOJ,UAAU,aAAaK,YAAY,YACtDC,MAAOzB,EAAO0B,SAAY,SAACnB,GAAD,OAAMN,EAASM,EAAEoB,OAAOF,UAClD,wBAAQF,KAAM,SAAd,yBAGoB,qBAAjBrB,EAAQkB,MACf,sBAAKD,UAAU,YAAf,UACE,sBAAKA,UAAU,eAAf,UACE,uCACA,qBAAKA,UAAU,WAAf,SAA2BjB,EAAQ0B,OACnC,qBAAKT,UAAU,OAAf,SAAuBH,OAEzB,sBAAKG,UAAU,cAAf,UACE,qBAAKA,UAAU,UAAf,SAA0BjB,EAAQA,QAAQ,GAAGkB,OAC3C,sBAAKD,UAAU,GAAf,UACA,qBAAKA,UAAU,OAAOU,IAAG,0CAAqCzB,EAArC,QAAiD0B,IAAI,iBAC9E,qBAAKX,UAAU,OAAf,SACI,sBAAKA,UAAU,OAAf,UAAuBY,KAAKC,MAAM9B,EAAQkB,KAAKC,MAA/C,qBApBhB,mBCzCSY,EAAkBC,0B,MCsBhBC,MAff,WAEE,OAEE,qBAAKhB,UAAU,MAAf,SAEA,cAACc,EAAgBG,SAAjB,CAA0BX,MAAM,KAAhC,SACI,cAAC,EAAD,SCNOY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9ca2487f.chunk.js","sourcesContent":["\nimport { useState } from 'react';\n\n\nfunction Weather(props) {\n \n    const [query, setQuery] = useState('');\n    const [weather, setWeather] = useState({});\n    const [icon, setIcon] = useState({})\n\n    const search = async(e) => {\n      e.preventDefault();\n        \n        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&appid=7a70aadda6c533a6072386a840e62097`)\n        const data = await response.json();\n        setQuery('')\n        console.log(data);\n        setWeather(data)\n        \n        setIcon(data.weather[0].icon);\n\n    }\n\n    // const dateBuilder = (d) => {\n\n    //     let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    //     let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n    \n    //     let day = days[d.getDay()];\n    //     let date = d.getDate();\n    //     let month = months[d.getMonth()];\n    //     let year = d.getFullYear();\n    \n    //     return `${day} ${date} ${month} ${year}`\n    \n    //   }\n\n    const today = Date().toString();\n\n    return (\n      \n    <div className={(typeof weather.main != 'undefined') \n      ? ((weather.main.temp > 16) \n      ? 'app-warm' : 'app') \n      : 'app'}>\n    <main>\n          <form onSubmit = { search}>\n            <div className=\"search-box\">\n              <input type=\"text\" className=\"search-bar\" placeholder=\"Search...\" \n              value={query} onChange= { (e)=> setQuery(e.target.value) }/>\n              <button type =\"submit\" >search</button>\n            </div>\n          </form>\n        {(typeof weather.main !== 'undefined' ) && (\n          <div className=\"container\">\n            <div className=\"location-box\">\n              <h3>Today</h3>\n              <div className=\"location\">{weather.name}</div>\n              <div className=\"date\">{today}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"weather\">{weather.weather[0].main}</div>\n                <div className=''>\n                <img className='icon' src={`http://openweathermap.org/img/w/${icon}.png`} alt=\"Weather icon\" />\n                <div className=\"temp\">\n                    <div className=\"temp\">{Math.round(weather.main.temp)}°</div>\n                    </div>\n                </div>\n              </div>\n            </div>\n            \n        ) }\n​    </main>\n\n    </div>\n  )\n   \n}\n\nexport default Weather\n\n\n","\nimport { createContext } from 'react';\n\nconst UserContext = createContext();\nexport const LanguageContext = createContext();\n\n\nexport default UserContext;","\nimport React from 'react';\nimport Weather from './Components/Weather';\n\n\nimport { LanguageContext } from './context';\n\nimport './App.css';\n\n\n\nfunction App() {\n\n  return (\n\n    <div className=\"App\">\n\n    <LanguageContext.Provider value=\"En\">\n        <Weather />\n   \n    </LanguageContext.Provider> \n\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\n    <App />,\n\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}